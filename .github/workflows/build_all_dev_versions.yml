name: build_all_dev_versions.yml

on:
  push:
    branches:
      - versions/dev/**

permissions:
  contents: read
  actions: read

env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build on ${{ github.ref_name }}
    runs-on: ubuntu-latest
    env:
      SAN_BRANCH: ${{ replace(github.ref_name, '/', '_') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Make Gradle wrapper executable
        shell: bash
        run: |
          chmod +x ./gradlew
          # Persist executable bit in the index for future clones (best effort)
          git update-index --chmod=+x gradlew || true
      - name: Build
        shell: bash
        run: ./gradlew --no-daemon clean build

      - name: Upload branch artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.SAN_BRANCH }}
          path: |
            **/build/libs/*.jar
          if-no-files-found: error
          retention-days: 14

  merge:
    name: Merge latest artifacts with Forgix
    runs-on: ubuntu-latest
    needs: build
    env:
      SAN_BRANCH: ${{ replace(github.ref_name, '/', '_') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Download artifact from current branch run
        uses: actions/download-artifact@v4
        with:
          name: build-${{ env.SAN_BRANCH }}
          path: artifacts/current
      - name: Make Gradle wrapper executable
        shell: bash
        run: |
          chmod +x ./gradlew
          git update-index --chmod=+x gradlew || true
      # Determine the other branch name (example: swap fabric<->forge in path)
      - name: Compute other branch
        id: other
        shell: bash
        run: |
          CUR="${{ github.ref_name }}"
          OTHER=""

          # Example rules — adjust to your branch naming:
          # versions/dev/fabric-1.21.x  <->  versions/dev/forge-1.21.x
          if [[ "$CUR" == versions/dev/fabric-* ]]; then
            OTHER="${CUR/versions\/dev\/fabric-/versions/dev/forge-}"
          elif [[ "$CUR" == versions/dev/forge-* ]]; then
            OTHER="${CUR/versions\/dev\/forge-/versions/dev/fabric-}"
          fi

          echo "name=$OTHER" >> "$GITHUB_OUTPUT"

      - name: Download other branch’s latest artifact
        if: ${{ steps.other.outputs.name != '' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build_all_dev_versions.yml
          branch: ${{ steps.other.outputs.name }}
          name: build-${{ steps.other.outputs.name }}
          path: artifacts/other
          if_no_artifact_found: ignore

      - name: List fetched artifacts (debug)
        shell: bash
        run: |
          echo "Current branch: ${{ github.ref_name }}"
          echo "Other branch: ${{ steps.other.outputs.name }}"
          echo "Artifacts tree:"
          tree -a artifacts || true

      - name: Find jars
        id: jars
        shell: bash
        run: |
          # Find one jar from each folder. Adjust selection if you publish multiple jars.
          CUR_JAR="$(ls -1 artifacts/current/**/*.jar artifacts/current/*.jar 2>/dev/null | head -n1 || true)"
          OTHER_JAR="$(ls -1 artifacts/other/**/*.jar artifacts/other/*.jar 2>/dev/null | head -n1 || true)"

          echo "cur=$CUR_JAR" >> $GITHUB_OUTPUT
          echo "other=$OTHER_JAR" >> $GITHUB_OUTPUT

          echo "Current jar: $CUR_JAR"
          echo "Other jar:   $OTHER_JAR"

      - name: Skip merge if no counterpart branch detected
        if: ${{ steps.other.outputs.name == '' }}
        shell: bash
        run: echo "No paired branch computed for '${{ github.ref_name }}'. Skipping merge."

      - name: Skip merge if other branch jar is missing
        if: ${{ steps.other.outputs.name != '' && steps.jars.outputs.other == '' }}
        shell: bash
        run: echo "No artifact found from the other branch yet. Skipping merge."

      - name: Run Forgix merge
        if: ${{ steps.other.outputs.name != '' && steps.jars.outputs.other != '' }}
        shell: bash
        run: |
          CUR_JAR="${{ steps.jars.outputs.cur }}"
          OTHER_JAR="${{ steps.jars.outputs.other }}"

          echo "Merging with Forgix:"
          echo "  current: $CUR_JAR"
          echo "  other:   $OTHER_JAR"

          mkdir -p forgix-input
          cp "$CUR_JAR" forgix-input/
          cp "$OTHER_JAR" forgix-input/
          ./gradlew --no-daemon forgix
          ls -l build/forgix || true

      - name: Upload merged jar
        if: ${{ steps.other.outputs.name != '' && steps.jars.outputs.other != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: merged-${{ env.SAN_BRANCH }}-with-${{ steps.other.outputs.name }}
          path: build/forgix/*.jar
          if-no-files-found: error
          retention-days: 14